{"version":3,"sources":["../src/sdk.js"],"names":["isFunction","func","constructor","call","apply","promisify","args","Promise","resolve","reject","first","shift","length","concat","error","require","process","cwd","filename","run","generator","iterator","iterate","iteration","done","value","then","next"],"mappings":"AAEA,a,yDAEA,GAAMA,YACJ,QADIA,WACJ,aACE,CAAC,EAAEC,MAAQA,KAAKC,WAAb,EAA4BD,KAAKE,IAAjC,EAAyCF,KAAKG,KAAhD,CADH,CADF,CAIO,GAAMC,6BAAY,QAAZA,UAAY,iCAAIC,IAAJ,sCAAIA,IAAJ,6BACvB,IAAIC,QAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CAC/B,GAAI,CACF,GAAMC,OAAQJ,KAAKK,KAAL,EAAd,CACAH,QAAQR,WAAWU,KAAX,EAAoBA,sBAASJ,IAAT,CAApB,CAAsCA,KAAKM,MAAL,CAAc,CAAd,CAAkB,CAACF,KAAD,EAAQG,MAAR,CAAeP,IAAf,CAAlB,CAAyCI,KAAvF,CACD,CAAC,MAAOI,KAAP,CAAc,CACdL,OAAOK,KAAP,CACD,CACF,CAPD,CADuB,CAAlB,CAUA,GAAMC,UACX,QADWA,SACX,iBACEA,UAAQC,QAAQC,GAAR,GAAgB,GAAhB,CAAsBC,QAA9B,CADF,CADK,C,yBAIA,GAAMC,iBAAM,QAANA,IAAM,CAACC,SAAD,CAAe,CAChC,GAAMC,UAAWD,WAAjB,CAEA,GAAME,SAAU,QAAVA,QAAU,CAACC,SAAD,QACdA,WAAUC,IAAV,CAAiBD,UAAUE,KAA3B,CACE,CAACF,UAAUE,KAAV,EAAmBzB,WAAWuB,UAAUE,KAAV,CAAgBC,IAA3B,CAAnB,CAAsDH,UAAUE,KAAhE,CAAwE,CAAEC,KAAM,eAAM,CAAG,CAAjB,CAAzE,EACGA,IADH,CACQ,sBACJJ,SAAQD,SAASM,IAAT,CAAcF,KAAd,CAAR,CADI,CADR,CAFY,CAAhB,CAMA,MAAOH,SAAQD,SAASM,IAAT,EAAR,CACR,CAVM","file":"sdk.js","sourcesContent":["/* jshint -W079, esversion: 6, strict: true, node: true */\r\n/* global module, process */\r\n'use strict';\r\n\r\nconst isFunction =\r\n  func =>\r\n    !!(func && func.constructor && func.call && func.apply);\r\n\r\nexport const promisify = (...args) =>\r\n  new Promise((resolve, reject) => {\r\n    try {\r\n      const first = args.shift();\r\n      resolve(isFunction(first) ? first(...args) : (args.length > 0 ? [first].concat(args) : first));\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n\r\nexport const require =\r\n  filename =>\r\n    require(process.cwd() + '/' + filename);\r\n\r\nexport const run = (generator) => {\r\n  const iterator = generator();\r\n\r\n  const iterate = (iteration) =>\r\n    iteration.done ? iteration.value :\r\n      (iteration.value && isFunction(iteration.value.then) ? iteration.value : { then: () => { } })\r\n        .then(value =>\r\n          iterate(iterator.next(value)));\r\n\r\n  return iterate(iterator.next());\r\n};\r\n\r\n"]}